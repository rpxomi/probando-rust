GITHUB

[ inicializar un repositorio local... ]

echo "# probando-rust" >> README.md
git init
git status
git config core.autocrlf false
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/rpxomi/probando-rust.git
git push -u origin main


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

[ subir a un repositorio ya creado en internet! ]

git remote add origin https://github.com/rpxomi/probando-rust.git
git branch -M main
git push -u origin main


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

git branch

git branch <nueva rama>

git checkout <cambiar-a-rama>

git branch -d <borrar-una-rama>


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

des-agregar todos los archivos
que se hayan agregado por "git add":
git rm -r cached .

remover la asociacion que tiene el -repositorio local-
con el -repositorio de GitHub- que esta en internet:
git remote remove origin

"origin", hace referencia a la pagina web de GitHub en internet


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

PARA SUBIR ARCHIVOS A LA RAMA "MAIN"

Y DESPUES SUBIR OTRAS ARCHIVOS
QUE ESTEN EN UNA UBICACI√ìN DIFERENTE DE LA COMPUTADORA

Y QUE SE ALMACENEN EN UNA "NUEVA RAMA"
¬°¬°¬° PARA QUE EL "MAIN" QUEDE LIMPIO !!!


[1]
desde la pagina web de GitHub...
crear un repositorio
y dejarlo vacio sin ningun archivo "README.md" ni nada
¬°¬°¬° SOLO usarlo para copiar la URL de ese repositorio !!!


[2]
en la computadora...
crear una carpeta
solo crear un "README.md" dentro de esa carpeta
una vez que se haya terminado de modificar todo
inicializar Git dentro de ella
y subirla al "main"
del repositorio de GitHub
que esta en internet 
########################################
mkdir probando-rust
cd probando-rust

notepad README.md
# probando-rust

git init
git status

git config core.autocrlf false
git add README.md

git commit -m "Primera subida"
git branch -M main

git remote add origin https://github.com/rpxomi/probando-rust.git
git push -u origin main
########################################


[3]
en una ubicaci√≥n diferente de la computadora... 
crear una nueva carpeta
crear un archivo README.md
crear un proyecto de Rust con la herramienta Cargo
una vez que se haya terminado de modifcar las cosas
subir el contenido de esta nueva carpeta
al mismo repositorio de antes
pero que ahora use una rama diferente
para que el "main" quede limpio
########################################
cargo new hola-mundo
cd hola-mundo

notepad README.md
# hola-mundo

el .gitignore lo crea Cargo
para que no se suban los archivos de Rust
que se hayan compilado al probar el programa...

git status

git config core.autocrlf false
git add .

git commit -m "Se sube ejemplo Hola mundo"
git branch -M hola-mundo

git remote add origin https://github.com/rpxomi/probando-rust.git
git push -u origin hola-mundo
########################################


[4]
y para seguir usando el mismo repositorio
para agregar archivos que esten en diferentes ubicaciones de la computadora

se tienen que repetir los pasos de crear un proyecto con Cargo
y dentro de la carpeta raiz de ese proyecto crear un README.md

para que una vez que se haya terminado de modificar todo
se elija el nombre que va a tener la nueva rama
git branch -M nueva-rama

y despues se agregue el origen
del mismo repositorio de GitHub de antes que esta en internet
git remote add origin https://github.com/rpxomi/probando-rust.git

para subir al repositorio en internet los archivos desde la computadora
poniendo el nombre que eligimos para la nueva rama
git push -u origin nueva-rama

y que el "main" siga quedando limpio


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

RUST

https://www.rust-lang.org/tools/install
DOWNLOAD RUSTUP-INIT.EXE (64-BIT)



En alg√∫n momento de la instalaci√≥n,
recibir√° un mensaje que explica
que tambi√©n necesitar√°
las herramientas de compilaci√≥n de MSVC
para Visual Studio 2013 o posterior.

Para adquirir las herramientas de compilaci√≥n,
deber√° instalar Visual Studio 2022.

Cuando se le pregunte qu√© cargas de trabajo instalar, incluya:
¬∑ Desktop Development with C++
¬∑ Windows 10 o 11 SDK
¬∑ English language pack component (junto con cualquier otro paquete de idioma de su elecci√≥n)



Verifique que Rust
est√© en su variable de sistema %PATH%
de la siguiente manera:

In Windows CMD, use:
> echo %PATH%

In PowerShell, use:
> echo $env:Path



Plugin para Visual Studio Code (VSCode):
rust-analyzer


########################################

src/main.rs

/*
rustup update
rustup self uninstall

rustup --version
cargo --version

rustup doc
rustup doc std::fmt

cargo new <nombre-del-proyecto>

cargo check
cargo build
cargo run

cargo check --release
cargo build --release
cargo run --release

cargo clean

rustup component add rustfmt
cargo fmt

rustup component add clippy
cargo clippy

cargo fix
*/

fn main() {
    println!( "¬°Hola üåç! Soy Super Juan y estoy probando Rust." );
}
